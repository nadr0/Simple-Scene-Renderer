// Sampler
int numberOfSamples = 1;
vp.sampler_ptr = new MultiJitter(numberOfSamples);
vp.num_samples = vp.sampler_ptr->num_samples;

// Camera
camera_ptr = new Pinhole;
camera_ptr->set_eye(0.0, 12.5, 40);
camera_ptr->set_lookat(0.0,10.0,0.0);
camera_ptr->set_view_distance(350);
camera_ptr->compute_uvw();

// Ray tracing method
// tracer_ptr = new MultipleObjects(this);     /* Determine tracer */
// tracer_ptr = new AreaLighting(this);
tracer_ptr = new PathTrace(this);

// Lighting
// DirectionalLight * L1 = new DirectionalLight(Vec4(0.45,0.05,0.45), RGBColor(1.0,1.0,1.0),2.5);
// PointLight * L1 = new PointLight(Vec4(0.0,10,10.0),RGBColor(1.0,1.0,1.0),15.0);
// add_light(L1);


// height of the box.
int HEIGHT = 25.0;

Vec4 r1_p = Vec4(-6.25,HEIGHT-2.0,6.25);
Vec4 r1_a = Vec4(0.0,0.0,12.5);
Vec4 r1_b = Vec4(12.5,0.0,0.0);
Vec4 r1_n = Vec4(0.0,-1.0,0.0);

Emissive * emissive_ptr = new Emissive();
emissive_ptr->ls = 2.0;

Rectangle * myRectangleTop = new Rectangle(r1_p,r1_a,r1_b,r1_n);
myRectangleTop->material_ptr = emissive_ptr;
add_object(myRectangleTop);

AreaLight * myAreaLight = new AreaLight();
myAreaLight->obj_ptr = myRectangleTop;
myAreaLight->material_ptr = emissive_ptr;
add_light(myAreaLight);

// Right Sphere.
Vec4 s2_c = Vec4(7.5,3.5,18.0);
Sphere * s2 = new Sphere(s2_c,3.5);
s2->material_ptr = new Matte();
s2->material_ptr->set_kd(1.0);
s2->material_ptr->set_ka(0.0);
s2->material_ptr->set_cd(white);
add_object(s2);

// Left sphere.
Vec4 s4_c = Vec4(-7.5,3.5,12.5);
Sphere * s4 = new Sphere(s4_c,3.5);
s4->material_ptr = new Reflective();
s4->material_ptr->set_kd(0.0);
s4->material_ptr->set_ka(0.0);
s4->material_ptr->set_cd(white);
s4->material_ptr->set_ks(0.0);
add_object(s4);

// My cornell box

// Floor.
Vec4 floor_p = Vec4(-12.5,0.0,0.0);
Vec4 floor_a = Vec4(0.0,0.0,25.0);
Vec4 floor_b = Vec4(25.0,0.0,0.0);
Vec4 floor_n = Vec4(0.0,1.0,0.0);

Rectangle * FLOOR = new Rectangle(floor_p,floor_a,floor_b,floor_n);
FLOOR->material_ptr = new Matte();
FLOOR->material_ptr->set_kd(1.0);
FLOOR->material_ptr->set_ka(0.0);
FLOOR->material_ptr->set_cd(white);
add_object(FLOOR);

// Left wall.
Vec4 leftWall_p = Vec4(-12.5,0.0,0.0);
Vec4 leftWall_a = Vec4(0.0,0.0,25.0);
Vec4 leftWall_b = Vec4(0.0,HEIGHT,0.0);
Vec4 leftWall_n = Vec4(1.0,0.0,0.0);

Rectangle * LEFT_WALL = new Rectangle(leftWall_p,leftWall_a,leftWall_b,leftWall_n);
LEFT_WALL->material_ptr = new Matte();
LEFT_WALL->material_ptr->set_kd(1.0);
LEFT_WALL->material_ptr->set_ka(0.0);
LEFT_WALL->material_ptr->set_cd(RGBColor(1.0,0.2,0.2));
add_object(LEFT_WALL);

// Right Wall.

Vec4 rightWall_p = Vec4(12.5,0.0,0.0);
Vec4 rightWall_a = Vec4(0.0,0.0,25.0);
Vec4 rightWall_b = Vec4(0.0,HEIGHT,0.0);
Vec4 rightWall_n = Vec4(-1.0,0.0,0.0);

Rectangle * RIGHT_WALL = new Rectangle(rightWall_p,rightWall_a,rightWall_b,rightWall_n);
RIGHT_WALL->material_ptr = new Matte();
RIGHT_WALL->material_ptr->set_kd(1.0);
RIGHT_WALL->material_ptr->set_ka(0.0);
RIGHT_WALL->material_ptr->set_cd(RGBColor(0.2,1.0,0.2));
add_object(RIGHT_WALL);

// Back Wall.

Vec4 backWall_p = Vec4(-12.5,0.0,0.0);
Vec4 backWall_a = Vec4(0.0,HEIGHT,0.0);
Vec4 backWall_b = Vec4(25.0,0.0,0.0);
Vec4 backWall_n = Vec4(0.0,0.0,1.0);

Rectangle * BACK_WALL = new Rectangle(backWall_p,backWall_a,backWall_b,backWall_n);
BACK_WALL->material_ptr = new Matte();
BACK_WALL->material_ptr->set_kd(1.0);
BACK_WALL->material_ptr->set_ka(0.0);
BACK_WALL->material_ptr->set_cd(white);
add_object(BACK_WALL);

// Ceiling.

Vec4 ceiling_p = Vec4(-12.5,HEIGHT,0.0);
Vec4 ceiling_a = Vec4(0.0,0.0,25.0);
Vec4 ceiling_b = Vec4(25.0,0.0,0.0);
Vec4 ceiling_n = Vec4(0.0,-1.0,0.0);

Rectangle * CEILING = new Rectangle(ceiling_p,ceiling_a,ceiling_b,ceiling_n);
CEILING->material_ptr = new Matte();
CEILING->material_ptr->set_kd(1.0);
CEILING->material_ptr->set_ka(0.0);
CEILING->material_ptr->set_cd(white);
add_object(CEILING);





// BVH_root = new BVH(1);
// BVH_root->buildBVH(objects, 0);

printf(" - - World Scene Complete - - \n");
